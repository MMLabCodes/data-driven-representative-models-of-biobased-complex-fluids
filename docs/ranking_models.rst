üìù Comparing data from the models
=================================

Now all the models are generated, key attributes can be extracted into a dataframe.

Create a list of all models
---------------------------

This code consolidates the models into one list:

.. code-block:: python

    # Create a list of all models for downstream analysis
    all_models = [
        pb_cp_FT_model,
        pb_cp_PT_model,
        pb_cp_AG_model,
        pb_cp_SG_model,
        pb_cp_ALL_model
    ]

This will work with more/less models and even models that used different datasets

Generate dataframe of the models
--------------------------------
For each model, the dataframe will contain weighted average values of the relevant molecular properties, such as:
   
- Molecular Weight
- Dipole Moment
- Chemical Hardness
- Polarizability
- Total Energy
- Heteroatom Content

The dataframe can be generated by passing the list of models to an existing function:

.. code-block:: python

    # Generate a DataFrame of weighted average properties from all models
    import pandas as pd

    df = generate_model_df(all_models)
    print(df)

Ranking dataframe
-----------------

Now the data can be ranked to ascertain the model that is closest to the benchmark and, hence, the best model for this mixture.

The ranking is performed using **Euclidean distance**, a mathematical measure of similarity in a multi-dimensional space. Here, the "points" are vectors representing the **weighted average molecular attributes** of each model.

The **closer** a model is to the **All model** in terms of Euclidean distance, the **higher** it ranks. This means it better represents the full chemical complexity of the dataset.

The Euclidean distance between two points \( P_1 \) and \( P_2 \) in \( n \)-dimensional space is:

.. math::

   d(P_1, P_2) = \sqrt{(x_1 - x_2)^2 + (y_1 - y_2)^2 + \cdots + (n_1 - n_2)^2}

Where:

- \( P_1 \) and \( P_2 \) represent two models.
- \( x, y, \ldots, n \) are the weighted average values of molecular properties, such as:
  - Molecular Weight
  - Dipole Moment
  - Polarizability
  - Chemical Hardness
  - Total Energy
  - Heteroatom Content (O, N, S)

There is a single line of code that will rank the data in the dataframe:

.. code-block:: python

   # Rank models using Euclidean distance to the All model as a benchmark
   ranked_models = rank_models(df)
   print(ranked_models)

The final ranked dataframe will look similar to the example below.

.. image:: images/ranked.png
   :alt: Directory structure for project
   :align: center
   :width: 600px

.. note::

   The *Distance_to_benchmark* is arbritrary, but useful to compare the performance of different models for the same mixture.
